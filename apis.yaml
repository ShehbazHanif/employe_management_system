openapi: 3.0.3
info:
  title: Employee Attendance & Task Management API
  version: 1.0.0
  description: API for managing employees, attendance tracking, and task assignments.
servers:
  - url: https://localhost:5005/api
    description: developement  server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Admin:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [admin]
        permissions:
          type: object
        profileImageUrl:
          type: string
        isActive:
          type: boolean
        lastLogin:
          type: string
          format: date-time

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        department:
          type: string
        designation:
          type: string
        role:
          type: string
          enum: [Employee, Manager, Hr]
        location:
          type: string
        profileImageUrl:
          type: string
        status:
          type: string
          enum: [Active, Inactive]

    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        attachments:
          type: array
          items:
            type: string
        assignedBy:
          $ref: '#/components/schemas/Admin'
        assignedTo:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [Pending, Progress, Complete, Overdue]
        priority:
          type: string
          enum: [Low, Medium, High, Critical]
        dueDate:
          type: string
          format: date-time
        comments:
          type: array
          items:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              message:
                type: string
              createdAt:
                type: string
                format: date-time

    Attendance:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        checkIn:
          type: string
          format: date-time
        checkOut:
          type: string
          format: date-time
        status:
          type: string
          enum: [Present, Absent, Leave]
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number

paths:
  /admin-auth/login:
    post:
      summary: Admin login
      tags: [AdminAuth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful

  /admin-auth/register:
    post:
      summary: Register a new admin
      tags: [AdminAuth]
      description: Allows creation of a new admin account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: Admin User
                email:
                  type: string
                  format: email
                  example: admin@example.com
                password:
                  type: string
                  format: password
                  example: Admin@123
      responses:
        '201':
          description: Admin created successfully
        '400':
          description: Bad request (e.g. duplicate email)
        '429':
          description: Too many requests (rate limited)

  /admin-auth/profile:
    get:
      summary: Get admin profile
      tags: [AdminAuth]
      security:
        - bearerAuth: []
      description: Retrieves the profile of the currently logged-in admin.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      admin:
                        $ref: '#/components/schemas/Admin'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin-auth/update-profile:
    patch:
      summary: Update admin profile
      tags: [AdminAuth]
      security:
        - bearerAuth: []
      description: Allows the logged-in admin to update their profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Admin Updated
                email:
                  type: string
                  format: email
                  example: newadmin@example.com
                phone:
                  type: string
                  example: 03123456789
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Admin not found

  /admin-auth/change-password:
    patch:
      summary: Change admin password
      tags: [AdminAuth]
      security:
        - bearerAuth: []
      description: Allows the admin to change their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: OldPass@123
                newPassword:
                  type: string
                  format: password
                  example: NewPass@456
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Old password incorrect or validation failed
        '401':
          description: Unauthorized

  /admin/register:
    post:
      summary: Register new employee
      tags: [Admin Employee]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Employee created

  /admin/delete/{id}:
    delete:
      summary: Delete a user
      tags: [Admin Employee]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted

  /admin/get-allUsers:
    get:
      summary: Get all users
      tags: [Admin Employee]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all users returned

  /admin/get-filterdUser:
    get:
      summary: Get filtered users based on query
      tags: [Admin Employee]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: department
          schema:
            type: string
        - in: query
          name: role
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [Active, Inactive]
      responses:
        200:
          description: Filtered user list returned

  /admin/get-singleUsers/{id}:
    get:
      summary: Get a single user by ID
      tags: [Admin Employee]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User details returned


  /admin/post-task:
    post:
      summary: Assign a new task
      tags: [ Admin Task]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        201:
          description: Task created

  /admin/export-attendance-csv:
    get:
      summary: Export attendance report as CSV
      tags: [Admin Attendance]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [Present, Absent, Leave]
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
      responses:
        200:
          description: CSV report
          content:
            text/csv:
              schema:
                type: string
                format: binary

  /admin/get-allTasks:
    get:
      summary: admin Get  all assigned tasks
      tags: [Admin Task]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Task list returned

  /admin/update-task/{id}:
    patch:
      summary: admin Update task status
      tags: [Admin Task]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        200:
          description: Task updated

  /admin/delete-task:
    get:
      summary: admin Delete assigned tasks
      tags: [Admin Task]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Task deleted

  /admin/get-filterdTasks:
    get:
      summary: Get filtered tasks
      tags: [Admin Task]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: assignedTo
          schema:
            type: string
          description: Filter tasks by assigned user ID
        - in: query
          name: priority
          schema:
            type: string
            enum: [Low, Medium, High]
          description: Filter tasks by priority
        - in: query
          name: status
          schema:
            type: string
            enum: [Pending, In Progress, Completed]
          description: Filter tasks by status
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter tasks from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter tasks to this date
      responses:
        200:
          description: Filtered task list returned
        401:
          description: Unauthorized
        500:
          description: Server error

  /admin/get-singleTask/{id}:
    get:
      summary: Get single task by ID
      tags: [Admin Task]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Task ID
      responses:
        200:
          description: Task data returned
        404:
          description: Task not found
        401:
          description: Unauthorized
        500:
          description: Server error


  /admin/attendance-reports:
    get:
      summary: Get detailed attendance reports
      tags: [ Admin Attendance]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Attendance report returned

  /user/login:
    post:
      summary: User login
      tags: [UserAuth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful

  /user/profile:
    get:
      summary: Get logged-in user's profile
      tags: [UserAuth]
      description: Returns the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: User not found

  /user/update-profile:
    patch:
      summary: Update logged-in user's profile
      tags: [UserAuth]
      description: Allows the logged-in user to update their profile information.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                phone:
                  type: string
                  example: 1234567890
                department:
                  type: string
                  example: Engineering
                designation:
                  type: string
                  example: Electric Engineer
                location:
                  type: string
                  example: Islamabad
                profileImageUrl:
                  type: string
                  example: https://example.com/profile.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /attendance/checkin:
    post:
      summary: Employee check-in
      tags: [ User Attendance]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Checked in successfully

  /attendance/checkout:
    post:
      summary: Employee check-out
      tags: [User Attendance]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Checked out successfully

  /user/attendance-summary:
    get:
      summary: User View  attendance Summary , working Hours , Break Time and OverTime (daily ,weekly, monthly)
      tags: [User Attendance]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Summary report returned

  /user/get/all-task:
    get:
      summary: user Get individual all assigned tasks
      tags: [Employee Tasks]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Task list returned

  /user/update-task/{id}:
    patch:
      summary: users Update task status
      tags: [ Employee Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        200:
          description: Task updated

  /user/get/latest-task:
    get:
      summary: Get the latest task assigned to the employee
      tags: [Employee Tasks]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Latest task returned successfully
        401:
          description: Unauthorized
        404:
          description: No task found
        500:
          description: Server error
         
